// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: loan.sql

package db

import (
	"context"
	"time"
)

const createLoan = `-- name: CreateLoan :one
INSERT INTO loans (
  user_id,
  book_id,
  due_date
) VALUES (
  $1, $2, $3
) RETURNING id, user_id, book_id, borrowed_at, due_date, returned_at, created_at, updated_at
`

type CreateLoanParams struct {
	UserID  int32     `json:"user_id"`
	BookID  int32     `json:"book_id"`
	DueDate time.Time `json:"due_date"`
}

func (q *Queries) CreateLoan(ctx context.Context, arg CreateLoanParams) (Loan, error) {
	row := q.db.QueryRowContext(ctx, createLoan, arg.UserID, arg.BookID, arg.DueDate)
	var i Loan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BookID,
		&i.BorrowedAt,
		&i.DueDate,
		&i.ReturnedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLoan = `-- name: DeleteLoan :exec
DELETE FROM loans
WHERE id = $1
`

func (q *Queries) DeleteLoan(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteLoan, id)
	return err
}

const getLoan = `-- name: GetLoan :one
SELECT id, user_id, book_id, borrowed_at, due_date, returned_at, created_at, updated_at FROM loans
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLoan(ctx context.Context, id int32) (Loan, error) {
	row := q.db.QueryRowContext(ctx, getLoan, id)
	var i Loan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BookID,
		&i.BorrowedAt,
		&i.DueDate,
		&i.ReturnedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listActiveLoans = `-- name: ListActiveLoans :many
SELECT id, user_id, book_id, borrowed_at, due_date, returned_at, created_at, updated_at FROM loans
WHERE returned_at IS NULL
ORDER BY due_date ASC
LIMIT $1
OFFSET $2
`

type ListActiveLoansParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListActiveLoans(ctx context.Context, arg ListActiveLoansParams) ([]Loan, error) {
	rows, err := q.db.QueryContext(ctx, listActiveLoans, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Loan{}
	for rows.Next() {
		var i Loan
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.BookID,
			&i.BorrowedAt,
			&i.DueDate,
			&i.ReturnedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLoansByUser = `-- name: ListLoansByUser :many
SELECT id, user_id, book_id, borrowed_at, due_date, returned_at, created_at, updated_at FROM loans
WHERE user_id = $1
ORDER BY borrowed_at DESC
LIMIT $2
OFFSET $3
`

type ListLoansByUserParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListLoansByUser(ctx context.Context, arg ListLoansByUserParams) ([]Loan, error) {
	rows, err := q.db.QueryContext(ctx, listLoansByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Loan{}
	for rows.Next() {
		var i Loan
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.BookID,
			&i.BorrowedAt,
			&i.DueDate,
			&i.ReturnedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOverdueLoans = `-- name: ListOverdueLoans :many
SELECT id, user_id, book_id, borrowed_at, due_date, returned_at, created_at, updated_at FROM loans
WHERE 
  returned_at IS NULL AND
  due_date < now()
ORDER BY due_date ASC
LIMIT $1
OFFSET $2
`

type ListOverdueLoansParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOverdueLoans(ctx context.Context, arg ListOverdueLoansParams) ([]Loan, error) {
	rows, err := q.db.QueryContext(ctx, listOverdueLoans, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Loan{}
	for rows.Next() {
		var i Loan
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.BookID,
			&i.BorrowedAt,
			&i.DueDate,
			&i.ReturnedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const returnBook = `-- name: ReturnBook :one
UPDATE loans
SET 
  returned_at = now(),
  updated_at = now()
WHERE 
  id = $1 AND
  returned_at IS NULL
RETURNING id, user_id, book_id, borrowed_at, due_date, returned_at, created_at, updated_at
`

func (q *Queries) ReturnBook(ctx context.Context, id int32) (Loan, error) {
	row := q.db.QueryRowContext(ctx, returnBook, id)
	var i Loan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BookID,
		&i.BorrowedAt,
		&i.DueDate,
		&i.ReturnedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
