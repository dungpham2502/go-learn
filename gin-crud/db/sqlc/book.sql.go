// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: book.sql

package db

import (
	"context"
	"database/sql"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (
  title,
  author,
  isbn,
  published_year,
  price,
  quantity
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, title, author, isbn, published_year, price, quantity, created_at, updated_at
`

type CreateBookParams struct {
	Title         string `json:"title"`
	Author        string `json:"author"`
	Isbn          string `json:"isbn"`
	PublishedYear int32  `json:"published_year"`
	Price         string `json:"price"`
	Quantity      int32  `json:"quantity"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.Title,
		arg.Author,
		arg.Isbn,
		arg.PublishedYear,
		arg.Price,
		arg.Quantity,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Isbn,
		&i.PublishedYear,
		&i.Price,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books
WHERE id = $1
`

func (q *Queries) DeleteBook(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBook, id)
	return err
}

const getBook = `-- name: GetBook :one
SELECT id, title, author, isbn, published_year, price, quantity, created_at, updated_at FROM books
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Isbn,
		&i.PublishedYear,
		&i.Price,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBookByISBN = `-- name: GetBookByISBN :one
SELECT id, title, author, isbn, published_year, price, quantity, created_at, updated_at FROM books
WHERE isbn = $1 LIMIT 1
`

func (q *Queries) GetBookByISBN(ctx context.Context, isbn string) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBookByISBN, isbn)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Isbn,
		&i.PublishedYear,
		&i.Price,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBooks = `-- name: ListBooks :many
SELECT id, title, author, isbn, published_year, price, quantity, created_at, updated_at FROM books
ORDER BY title
LIMIT $1
OFFSET $2
`

type ListBooksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBooks(ctx context.Context, arg ListBooksParams) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, listBooks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Isbn,
			&i.PublishedYear,
			&i.Price,
			&i.Quantity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchBooks = `-- name: SearchBooks :many
SELECT id, title, author, isbn, published_year, price, quantity, created_at, updated_at FROM books
WHERE 
  title ILIKE '%' || $1 || '%' OR
  author ILIKE '%' || $1 || '%'
ORDER BY title
LIMIT $2
OFFSET $3
`

type SearchBooksParams struct {
	Column1 sql.NullString `json:"column_1"`
	Limit   int32          `json:"limit"`
	Offset  int32          `json:"offset"`
}

func (q *Queries) SearchBooks(ctx context.Context, arg SearchBooksParams) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, searchBooks, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Isbn,
			&i.PublishedYear,
			&i.Price,
			&i.Quantity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :one
UPDATE books
SET 
  title = $2,
  author = $3,
  price = $4,
  quantity = $5,
  updated_at = now()
WHERE id = $1
RETURNING id, title, author, isbn, published_year, price, quantity, created_at, updated_at
`

type UpdateBookParams struct {
	ID       int32  `json:"id"`
	Title    string `json:"title"`
	Author   string `json:"author"`
	Price    string `json:"price"`
	Quantity int32  `json:"quantity"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, updateBook,
		arg.ID,
		arg.Title,
		arg.Author,
		arg.Price,
		arg.Quantity,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Isbn,
		&i.PublishedYear,
		&i.Price,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
